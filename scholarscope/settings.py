"""
Django settings for scholarscope project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from decouple import config
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('DJANGO_SECRET_KEY')
# 6dik9^mld%u(9jwj-t@o758h$(^7d@#d*&he&j-2ovo=v6slh@
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    'django.contrib.sites',
    'rest_framework',
    'taggit',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'django_celery_beat',
    'django_celery_results',
    'widget_tweaks',
    'django_htmx',
    'scholarships.apps.ScholarshipsConfig',
     "debug_toolbar",
     'tailwind',
     'theme',
     ]

TAILWIND_APP_NAME='theme'
NPM_BIN_PATH = r"C:\Program Files\nodejs\npm.cmd"

if DEBUG:
    INSTALLED_APPS += ['django_browser_reload']

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',

    'allauth.account.auth_backends.AuthenticationBackend',
]


MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "debug_toolbar.middleware.DebugToolbarMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "allauth.account.middleware.AccountMiddleware",
     "django_htmx.middleware.HtmxMiddleware",
]

if DEBUG:
    # Add django_browser_reload middleware only in DEBUG mode
    MIDDLEWARE += [
        "django_browser_reload.middleware.BrowserReloadMiddleware",
    ]
    
ROOT_URLCONF = "scholarscope.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "scholarscope.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases
if DEBUG:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }
else:
    import dj_database_url
    # DATABASES['default'] = dj_database_url.parse(config('DATABASE_URL'))

    DATABASES = {
        "default": dj_database_url.parse(
            config("DATABASE_URL", default=f"sqlite:///{BASE_DIR / 'db.sqlite3'}"),
            conn_max_age=600,
            ssl_require=True
        )
    }
# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"
STATIC_FILES = [ BASE_DIR / 'static']
STATIC_ROOT = BASE_DIR / 'staticfiles'

MEDIA_URL= 'media/'
MEDIA_ROOT= BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
AUTH_USER_MODEL = 'scholarships.User'

SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'APP': {
            'client_id': config('GOOGLE_OAUTH_CLIENT_ID'),
            'secret': config('GOOGLE_OAUTH_CLIENT_SECRET'),
            'key': ''
        },
        'SCOPE': [
            'profile',
            'email',
        ],
    }
}

# ACCOUNT_AUTHENTICATION_METHOD = "username_email"
ACCOUNT_LOGIN_METHODS = {'username', 'email'}
# ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_SIGNUP_FIELDS = ['email*', 'username*', 'password1*', 'password2*']
# ACCOUNT_EMAIL_VERIFICATION = "mandatory"
CELERY_RESULT_BACKEND='django-db'
CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP=True

CELERY_BROKER_URL = config('CELERY_BROKER_URL')
CELERY_BEAT_SCHEDULER='django_celery_beat.schedulers.DatabaseScheduler'

LOGIN_REDIRECT_URL = 'scholarship_list'
LOGOUT_REDIRECT_URL = 'account_login'
# if DEBUG:
#     EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
#     EMAIL_HOST = 'smtp.gmail.com'
#     EMAIL_HOST_USER = config('EMAIL_ADDRESS')
#     EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')
#     EMAIL_PORT = 587
#     EMAIL_USE_TLS = True
#     DEFAULT_FROM_EMAIL = F"SCHOLARSCOPE {config('EMAIL_ADDRESS')}"
#     ACCOUNT_EMAIL_SUBJECT_PREFIX = ''
# else:
#     EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

# if DEBUG:
#     EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
#     DEFAULT_FROM_EMAIL = f"SCHOLARSCOPE <{config('EMAIL_ADDRESS')}>"
#     ACCOUNT_EMAIL_SUBJECT_PREFIX = ''
# else:
#     EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
#     EMAIL_HOST = 'smtp.gmail.com'
#     EMAIL_HOST_USER = config('EMAIL_ADDRESS')
#     EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')
#     EMAIL_PORT = 587
#     EMAIL_USE_TLS = True
#     DEFAULT_FROM_EMAIL = f"SCHOLARSCOPE <{config('EMAIL_ADDRESS')}>"
#     ACCOUNT_EMAIL_SUBJECT_PREFIX = ''

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_HOST_USER = config('EMAIL_ADDRESS')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')
EMAIL_PORT = 587
EMAIL_USE_TLS = True
DEFAULT_FROM_EMAIL = f"SCHOLARSCOPE <{config('EMAIL_ADDRESS')}>"
ACCOUNT_EMAIL_SUBJECT_PREFIX = ''

SITE_ID = 1

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/1",  # DB 1
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}

INTERNAL_IPS = [
    # ...
    "127.0.0.1",
    # ...
]

SITE_URL = config("SITE_URL", default="http://127.0.0.1:8000")

INTERNAL_IPS = ['127.0.0.1', 'localhost:8000']